**Github basics**

git config --global user.name "--set username--"
git config --global user.email "--set email--"

git status	//shows status of our git repository (repo)

git init	//initializes/makes our directory a repo

git add --a	    //add all files to the staging area

git commit -m	//commit with a message

git log	//shows commit history

.git is a folder where all our repo files are stored

to delete/remove our repository/.git folder use:
	rm -rf .git

git clone "repo"	//used to clone a directory/repo

--	git file lifecycle	--
1. git init:empty repository	untracked files
2. git add --a	unmodified files at staged state
3. git commit -m "msg"	commited unmodified file at commit stage

//if any file is changed/modified then it's modified file
	//it has to be added as add --a will tranfer it to staged state

.gitignore is used to ignore the files mentioned in it 
for example if we want to make error.log/other files to be ignored in our repo then we can mention the file name in .gitignore file 
now whatever the changes modified in error.log file we need not to commit/add it to staged stage

if we want to ignore all the log files then we can write *.log in .gitigonre i.e. all .log extension files will be ignored 

git rm --cached second.txt

git diff	://compares working directory with staging area

if there's no differences in staging area and working area then git diff shows nothing

to compare staging area with previosly committed version:
	git diff --staged

to directly commit from modified avoid add . /staging we can use:
	git commit -a -m "msg"

git log -p shows records of diff
git log -p -n(1,2,3,..)
git log --stat shows statistics of all diff and logs

git log --pretty=oneline  //shows all commit messages in oneline
git log --pretty=short
git log --pretty=full
git log --since=2.months/hours/minutes/years/anything
git log --pretty=format:"%h -- %an" %h shows hashed commits and %an is author name

to change a commit message:
 git commit --amend

to search in log:
git log --grep="another"

to unstage a file:
git restore --staged <filename>

if by chance we deletes /modifies the content of original file then to restore it we can use:
git checkout -- <filename>

setting alias in git :
git config --global alias.ci commit //ci is an alias for commit now

How to push Existing Code to a new Github repository

Copy the HTTPS link provided.
Run git init in the terminal. This will initialize the folder/repository that you have on your local computer system.
Run git add . in the terminal. This will track any changes made to the folder on your system, since the last commit. As this is the first time you are committing the contents of the folder, it will add everything.
Run git commit -m"insert Message here". This will prepare the added/tracked changes to the folder on your system for pushing to Github. Here, insert Message here can be replaced with any relevant commit message of your choice.
Run git remote add origin https://github.com/Usheninte/example.git in the terminal. Here, Usheninte and example will be replaced by the values provided in the copied link. This will push the existing folder on you local computer system, to the newly created Github repository.
Run git remote -v. This does some git pull and git push magic, to ensure that the contents of your new Github repository, and the folder on you local system are the same.
Run git push origin master. Note that the last word in the command master, is not a fixed entry when running git push. It can be replaced with any relevant “branch_name”.

creating a new branch:
	git checkout -b <branchname>

switching to master/any other branch 
	git checkout master/any other branch

$ git reset HEAD~1# Remove the most recent commit# Commit again

to merge a branch to another branch/master branch:
	git merge <branchname>

git branch:	lists branches

delete a merged branch:
git branch -d <branchname>	we may get error in -d
not to get an error use -D instead

